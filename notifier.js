// notifier.js
const bus = require("./events");
const { prisma } = require("./db");
const { ruMoney, instructionsMenu, paymentSuccessMenu } = require("./menus");
const { Markup } = require("telegraf");

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫ —Å–æ–±—ã—Ç–∏—è–º –æ–ø–ª–∞—Ç—ã –∏ —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * –í–∞–∂–Ω–æ: —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º bot —Å–Ω–∞—Ä—É–∂–∏ (–Ω–∏–∫–∞–∫–∏—Ö require('./bot') ‚ûú –Ω–µ—Ç —Ü–∏–∫–ª–æ–≤).
 */
function initNotifier(bot) {
  // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
  bus.on("topup.success", async ({ topupId }) => {
    try {
      const topup = await prisma.topUp.findUnique({ where: { id: topupId } });
      if (!topup) return;

      const user = await prisma.user.findUnique({ where: { id: topup.userId } });
      if (!user?.chatId) {
        console.warn(`[NOTIFY] No chatId for user ${user?.id}`);
        return;
      }

      const text =
        `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n` +
        `–°—É–º–º–∞: ${ruMoney(topup.amount)}\n` +
        `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${ruMoney(user.balance)}`;

      await bot.telegram.sendMessage(user.chatId, text, paymentSuccessMenu());
      console.log(`[NOTIFY] Success sent to chatId=${user.chatId} for topup=${topupId}`);
    } catch (e) {
      console.error("[NOTIFY] Error sending success:", e);
    }
  });

// –ê–≤—Ç–æ–∏—Å—Ç–µ—á–µ–Ω–∏–µ (TIMEOUT)
bus.on("topup.timeout", async ({ topupId }) => {
  try {
    const topup = await prisma.topUp.findUnique({ where: { id: topupId } });
    if (!topup) return;

    const user = await prisma.user.findUnique({ where: { id: topup.userId } });
    if (!user?.chatId) return;

    const text =
      `‚è≥ –°—á—ë—Ç –Ω–∞ ${ruMoney(topup.amount)} –∏—Å—Ç—ë–∫ (–Ω–µ –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç).\n\n` +
      `üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @grangym`;

    await bot.telegram.sendMessage(user.chatId, text);
    console.log(`[NOTIFY] Timeout sent to chatId=${user.chatId} for topup=${topupId}`);
  } catch (e) {
    console.error("[NOTIFY] Error sending timeout:", e);
  }
});


  // –ù–µ—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø–æ–ª–µ–∑–Ω–æ –∏–º–µ—Ç—å)
  bus.on("topup.failed", async ({ topupId }) => {
    try {
      const topup = await prisma.topUp.findUnique({ where: { id: topupId } });
      if (!topup) return;

      const user = await prisma.user.findUnique({ where: { id: topup.userId } });
      if (!user?.chatId) return;

      const text =
        `‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n` +
        `–°—É–º–º–∞: ${ruMoney(topup.amount)}\n\n` +
        `üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
        `‚Ä¢ –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞\n` +
        `‚Ä¢ –û—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é\n` +
        `‚Ä¢ –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n\n` +
        `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @grangym`;

      await bot.telegram.sendMessage(user.chatId, text);
      console.log(`[NOTIFY] Fail sent to chatId=${user.chatId} for topup=${topupId}`);
    } catch (e) {
      console.error("[NOTIFY] Error sending fail:", e);
    }
  });

  console.log("üîî Notifier attached to payment events");
}

module.exports = { initNotifier };
