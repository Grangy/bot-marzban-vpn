#!/usr/bin/env node
// backup-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏
require('dotenv').config();
const { createBackup, getBackupList, restoreBackup, cleanupOldBackups } = require('./backup');

const command = process.argv[2];

async function main() {
  switch (command) {
    case 'create':
      console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...');
      const result = await createBackup();
      if (result.success) {
        console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${result.filename} (${result.size} KB)`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
      break;

    case 'list':
      console.log('üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤:');
      const backups = getBackupList();
      if (backups.length === 0) {
        console.log('  –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤');
      } else {
        backups.forEach((backup, index) => {
          console.log(`  ${index + 1}. ${backup.name} (${backup.size} KB) - ${backup.created.toLocaleString()}`);
        });
      }
      break;

    case 'restore':
      const backupName = process.argv[3];
      if (!backupName) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node backup-manager.js restore <backup-name>');
        process.exit(1);
      }
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: ${backupName}`);
      const restoreResult = await restoreBackup(backupName);
      if (restoreResult.success) {
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: ${backupName}`);
        console.log(`üíæ –¢–µ–∫—É—â–∞—è –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: ${restoreResult.currentBackup}`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${restoreResult.error}`);
      }
      break;

    case 'cleanup':
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...');
      await cleanupOldBackups();
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      break;

    case 'status':
      const statusBackups = getBackupList();
      console.log(`üìä –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤:`);
      console.log(`  –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: ${statusBackups.length}`);
      console.log(`  –ú–∞–∫—Å–∏–º—É–º: 10`);
      console.log(`  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.env.BACKUP_DIR || './back'}`);
      if (statusBackups.length > 0) {
        const latest = statusBackups[0];
        console.log(`  –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${latest.name} (${latest.created.toLocaleString()})`);
      }
      break;

    default:
      console.log('üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      console.log('');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node backup-manager.js create     - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø');
      console.log('  node backup-manager.js list       - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤');
      console.log('  node backup-manager.js restore <name> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞');
      console.log('  node backup-manager.js cleanup    - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã');
      console.log('  node backup-manager.js status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
      console.log('');
      console.log('–ü—Ä–∏–º–µ—Ä—ã:');
      console.log('  node backup-manager.js create');
      console.log('  node backup-manager.js list');
      console.log('  node backup-manager.js restore backup-2025-10-21T09-25-22-811Z.db');
      break;
  }
}

main().catch(console.error);
