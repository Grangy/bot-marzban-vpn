// promo.js
const { prisma } = require("./db");
const { Markup } = require("telegraf");
const { ruMoney, promoMenu, PLANS } = require("./menus");
const { SubscriptionType } = require("@prisma/client");
const fetch = require("node-fetch");

const MARZBAN_API_URL = process.env.MARZBAN_API_URL;

function shareLink(text) {
  const base = "https://t.me/share/url";
  return `${base}?text=${encodeURIComponent(text)}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban API
async function createMarzbanUser(telegramId, subscriptionId) {
  console.log("[DEBUG] MARZBAN_API_URL:", MARZBAN_API_URL);
  
  if (!MARZBAN_API_URL || MARZBAN_API_URL === "your_marzban_api_url") {
    console.log("[DEBUG] Using fake URL - API not configured");
    // –ï—Å–ª–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é —Å—Å—ã–ª–∫—É
    return `https://fake-vpn.local/subscription/${subscriptionId}`;
  }

  const username = `${telegramId}_PROMO_${subscriptionId}`;
  const expireSeconds = 10 * 24 * 60 * 60; // 10 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const expire = Math.floor(Date.now() / 1000) + expireSeconds;

  const userData = {
    username: username,
    proxies: {
      vless: {
        id: require("crypto").randomUUID(),
        flow: "xtls-rprx-vision"
      }
    },
    expire: expire,
    data_limit: 0, // –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    data_limit_reset_strategy: "no_reset"
  };

  try {
    console.log("[DEBUG] Sending request to Marzban API:", `${MARZBAN_API_URL}/users`);
    console.log("[DEBUG] User data:", JSON.stringify(userData, null, 2));
    
    const response = await fetch(`${MARZBAN_API_URL}/users`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.MARZBAN_TOKEN || "fake_token"}`
      },
      body: JSON.stringify(userData)
    });

    console.log("[DEBUG] Response status:", response.status);
    console.log("[DEBUG] Response headers:", response.headers);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("[Marzban] Failed to create user:", errorText);
      return `https://fake-vpn.local/subscription/${subscriptionId}`;
    }

    const result = await response.json();
    console.log("[DEBUG] Marzban response:", JSON.stringify(result, null, 2));
    return result.subscription_url || `https://fake-vpn.local/subscription/${subscriptionId}`;
  } catch (error) {
    console.error("[Marzban] Error creating user:", error);
    return `https://fake-vpn.local/subscription/${subscriptionId}`;
  }
}

function registerPromo(bot) {
  // –≠–∫—Ä–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.action("promo", async (ctx) => {
    await ctx.answerCbQuery();
    const me = await prisma.user.findUnique({ where: { id: ctx.dbUser.id } });

    const activations = await prisma.promoActivation.count({
      where: { codeOwnerId: me.id },
    });

    const msg =
`üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: \`${me.promoCode}\`
–ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${activations}

–ü–æ–¥–∞—Ä–æ–∫: –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥—ë—Ç –≤–∞—à –∫–æ–¥, –ø–æ–ª—É—á–∏—Ç VPN –Ω–∞ 10 –¥–Ω–µ–π. 
–í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ß–£–ñ–û–ô –∫–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑ (–∫–æ–º–∞–Ω–¥–∞ –Ω–∏–∂–µ).`;

    const shareText = `–ú–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ ${me.promoCode} ‚Äî VPN –Ω–∞ 10 –¥–Ω–µ–π`;
    const kb = Markup.inlineKeyboard([
      [Markup.button.url("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º", shareLink(shareText))],
      [Markup.button.callback("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", "promo_activate")],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")],
    ]);

    await ctx.replyWithMarkdown(msg, kb);
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  bot.action("promo_activate", async (ctx) => {
    await ctx.answerCbQuery();
    const text =
`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç:
\`/promo –í–ê–®_–ö–û–î\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`/promo A1B2C3D4\``;
    await ctx.replyWithMarkdown(text, promoMenu());
  });

  // –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /promo ABCD1234
  bot.command("promo", async (ctx) => {
    const raw = ctx.message?.text || "";
    const match = raw.trim().match(/^\/promo(?:@\w+)?\s+([A-Z0-9-]{4,32})$/i);

    if (!match) {
      return ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /promo –í–ê–®_–ö–û–î");
    }

    const inputCode = match[1].toUpperCase();

    try {
      const result = await prisma.$transaction(async (tx) => {
        const me = await tx.user.findUnique({ where: { id: ctx.dbUser.id } });

        // –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        const owner = await tx.user.findUnique({
          where: { promoCode: inputCode },
        });
        if (!owner) return { ok: false, reason: "NOT_FOUND" };

        // –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π
        if (owner.id === me.id) return { ok: false, reason: "SELF" };

        // —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–∞–Ω—å—à–µ –ª—é–±–æ–π –∫–æ–¥?
        const already = await tx.promoActivation.findUnique({
          where: { activatorId: me.id },
        });
        if (already) return { ok: false, reason: "ALREADY" };

        // —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await tx.promoActivation.create({
          data: {
            codeOwnerId: owner.id,
            activatorId: me.id,
            amount: 0, // –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
          },
        });

        // —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 10 –¥–Ω–µ–π
        const endDate = new Date();
        endDate.setDate(endDate.getDate() + 10);
        
        const sub = await tx.subscription.create({
          data: {
            userId: me.id,
            type: SubscriptionType.PROMO_10D,
            startDate: new Date(),
            endDate: endDate,
          },
        });

        return { ok: true, owner, sub };
      });

      if (!result.ok) {
        if (result.reason === "NOT_FOUND")
          return ctx.reply("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        if (result.reason === "SELF")
          return ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥.");
        if (result.reason === "ALREADY")
          return ctx.reply("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.");
        return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.");
      }

      // —Å–æ–∑–¥–∞—ë–º VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
      const subscriptionUrl = await createMarzbanUser(ctx.dbUser.telegramId, result.sub.id);
      
      // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
      await prisma.subscription.update({
        where: { id: result.sub.id },
        data: { subscriptionUrl }
      });

      // –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω DM)
      try {
        const owner = result.owner;
        if (owner.chatId) {
          await ctx.telegram.sendMessage(
            owner.chatId,
            `üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.dbUser.accountName || ctx.dbUser.telegramId}`
          );
        }
      } catch (e) {
        // –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ VPN
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VPN –Ω–∞ 10 –¥–Ω–µ–π.\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: ${subscriptionUrl}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –≤ —Å–≤–æ—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`);
    } catch (e) {
      console.error("[PROMO] error:", e);
      return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
}

module.exports = { registerPromo };
