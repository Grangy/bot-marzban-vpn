// promo.js
const { prisma } = require("./db");
const { Markup } = require("telegraf");
const { ruMoney, promoMenu } = require("./menus");

const PROMO_BONUS = 100;

function shareLink(text) {
  const base = "https://t.me/share/url";
  return `${base}?text=${encodeURIComponent(text)}`;
}

function registerPromo(bot) {
  // –≠–∫—Ä–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.action("promo", async (ctx) => {
    await ctx.answerCbQuery();
    const me = await prisma.user.findUnique({ where: { id: ctx.dbUser.id } });

    const activations = await prisma.promoActivation.count({
      where: { codeOwnerId: me.id },
    });

    const msg =
`üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: \`${me.promoCode}\`
–ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${activations}

–ü–æ–¥–∞—Ä–æ–∫: –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥—ë—Ç –≤–∞—à –∫–æ–¥, –ø–æ–ª—É—á–∏—Ç +${ruMoney(PROMO_BONUS)}. 
–í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ß–£–ñ–û–ô –∫–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑ (–∫–æ–º–∞–Ω–¥–∞ –Ω–∏–∂–µ).`;

    const shareText = `–ú–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ ${me.promoCode} ‚Äî –±–æ–Ω—É—Å +${PROMO_BONUS}‚ÇΩ`;
    const kb = Markup.inlineKeyboard([
      [Markup.button.url("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º", shareLink(shareText))],
      [Markup.button.callback("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", "promo_activate")],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")],
    ]);

    await ctx.replyWithMarkdown(msg, kb);
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  bot.action("promo_activate", async (ctx) => {
    await ctx.answerCbQuery();
    const text =
`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç:
\`/promo –í–ê–®_–ö–û–î\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`/promo A1B2C3D4\``;
    await ctx.replyWithMarkdown(text, promoMenu());
  });

  // –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: /promo ABCD1234
  bot.command("promo", async (ctx) => {
    const raw = ctx.message?.text || "";
    const match = raw.trim().match(/^\/promo(?:@\w+)?\s+([A-Z0-9-]{4,32})$/i);

    if (!match) {
      return ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥: /promo –í–ê–®_–ö–û–î");
    }

    const inputCode = match[1].toUpperCase();

    try {
      const result = await prisma.$transaction(async (tx) => {
        const me = await tx.user.findUnique({ where: { id: ctx.dbUser.id } });

        // –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        const owner = await tx.user.findUnique({
          where: { promoCode: inputCode },
        });
        if (!owner) return { ok: false, reason: "NOT_FOUND" };

        // –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π
        if (owner.id === me.id) return { ok: false, reason: "SELF" };

        // —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–∞–Ω—å—à–µ –ª—é–±–æ–π –∫–æ–¥?
        const already = await tx.promoActivation.findUnique({
          where: { activatorId: me.id },
        });
        if (already) return { ok: false, reason: "ALREADY" };

        // —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ –∑–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        await tx.promoActivation.create({
          data: {
            codeOwnerId: owner.id,
            activatorId: me.id,
            amount: PROMO_BONUS,
          },
        });

        await tx.user.update({
          where: { id: me.id },
          data: { balance: { increment: PROMO_BONUS } },
        });

        return { ok: true, owner };
      });

      if (!result.ok) {
        if (result.reason === "NOT_FOUND")
          return ctx.reply("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        if (result.reason === "SELF")
          return ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥.");
        if (result.reason === "ALREADY")
          return ctx.reply("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.");
        return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.");
      }

      // –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω DM)
      try {
        const owner = result.owner;
        if (owner.chatId) {
          await ctx.telegram.sendMessage(
            owner.chatId,
            `üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.dbUser.accountName || ctx.dbUser.telegramId}`
          );
        }
      } catch (e) {
        // –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }

      // –ø–æ–∫–∞–∂–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const meAfter = await prisma.user.findUnique({ where: { id: ctx.dbUser.id } });
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ë–æ–Ω—É—Å: +${ruMoney(PROMO_BONUS)}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${ruMoney(meAfter.balance)}`);
    } catch (e) {
      console.error("[PROMO] error:", e);
      return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
}

module.exports = { registerPromo };
